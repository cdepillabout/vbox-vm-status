#!/usr/bin/env python3
# List status of vms

import os
import re
import sys
import argparse

from subprocess import Popen, PIPE
from multiprocessing import Process, Queue

ESCAPE="\033"

# colored text
BLACK_TEXT= ESCAPE + '[30m'
RED_TEXT= ESCAPE + '[31m'
GREEN_TEXT= ESCAPE + '[32m'
YELLOW_TEXT= ESCAPE + '[33m'
BLUE_TEXT= ESCAPE + '[34m'
MAGENTA_TEXT= ESCAPE + '[35m'
CYAN_TEXT= ESCAPE + '[36m'
WHITE_TEXT= ESCAPE + '[37m'

# bold color output 
BOLD_TEXT= ESCAPE + '[01m'

BOLD_BLACK_TEXT= BOLD_TEXT + BLACK_TEXT
BOLD_RED_TEXT= BOLD_TEXT + RED_TEXT
BOLD_GREEN_TEXT= BOLD_TEXT + GREEN_TEXT
BOLD_YELLOW_TEXT= BOLD_TEXT + YELLOW_TEXT
BOLD_BLUE_TEXT= BOLD_TEXT + BLUE_TEXT
BOLD_MAGENTA_TEXT= BOLD_TEXT + MAGENTA_TEXT
BOLD_CYAN_TEXT= BOLD_TEXT + CYAN_TEXT
BOLD_WHITE_TEXT= BOLD_TEXT + WHITE_TEXT

# normal text
RESET_TEXT= ESCAPE + '[00m'

def runcommand(args):
    """
    Run a command and check stderr.  
    If anything is found on stderr, exit.
    Return stdout.
    """
    stdout, stderr = Popen(args, stdout=PIPE, stderr=PIPE).communicate()
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')

    if stderr:
        print("ERROR! Could not run command %s:\n%s" % (args, stderr))
        sys.exit(1)

    warning = checkWarning(stdout)
    if warning:
        print(warning)
        sys.exit(1)

    return stdout

def checkWarning(stdout):
    """
    Checks the output of VBoxManage and makes sure there is no warning.
    Returns the warning string if there is a warning or None if no warning.
    """
    # is there a warning?
    m = re.match("^(WARNING: )", stdout)
    if not m:
        return None

    # return the warning text
    m = re.match("^(WARNING: )(.*?)(\nUUID:.*)?$", stdout, re.S)
    assert(len(m.groups()) >= 2)
    return m.group(1) + m.group(2)

def print_status(queue, name, uuid, longest_name_len):
    cmd = ["VBoxManage", "showvminfo", uuid]
    output = runcommand(cmd)

    # find state line
    stateline = ''
    for line in output.strip().split('\n'):
        if line.startswith("State:"):
            stateline = line
    if stateline == '':
        print("ERROR! Couldn't find \"State:\" line when running cmd `%s`" % cmd)
        sys.exit(1)

    # get the state and the date since, and do a little formatting
    stateline = stateline.strip()
    a, state_since = stateline.split(None, 1)
    state, since = state_since.rsplit('(', 1)
    state = state.strip()
    since = since[:-1]

    if state == 'running':
        state = BOLD_GREEN_TEXT + state + "    " + RESET_TEXT
    elif state == 'saved':
        state = BOLD_BLUE_TEXT + state + "      " + RESET_TEXT

    status_string = "%%-%ds  %%s" % longest_name_len
    queue.put([name, status_string % (name, state)])

def main():
    parser = argparse.ArgumentParser(description="List the current state of vbox vms.")
    parser.add_argument('VM', type=str, nargs="?", help="VirtualBox VM name")
    args = parser.parse_args()

    output = runcommand(["VBoxManage", "list", "vms"])
    vms = []
    longest_vm_name = -1
    for line in output.strip().split('\n'):
        name, uuid = line.rsplit(" ", 1)
        # get rid of quotes and {}
        name = name[1:]
        name = name[:-1]
        uuid = uuid[1:]
        uuid = uuid[:-1]
        vms.append((name, uuid))
        if len(name) > longest_vm_name:
            longest_vm_name = len(name)

    vms.sort(key=lambda tup: tup[0])

    # if we only want one vm, then just get that one
    if args.VM:
        # find vm with matching name
        new_vms = []
        for vm in vms:
            if vm[0] == args.VM:
                new_vms = [vm]
                break
        if not new_vms:
            print("ERROR! Could not find a VM named \"%s\"" % args.VM)
            sys.exit(1)
        else:
            vms = new_vms

    queue = Queue()
    processes = []

    # kick off all processes
    for i in range(len(vms)):
        name, uuid = vms[i]
        p = Process(target=print_status, args=(queue, name, uuid, longest_vm_name))
        p.start()
        processes.append(p)

    # join all processes
    for p in processes:
        p.join()

    # get all results
    results = []
    while not queue.empty():
        item = queue.get()
        results.append(item)

    # sort results based on vm name
    results.sort(key=lambda tup: tup[0])

    # print results
    for name, print_line in results:
        print(print_line)

if __name__ == '__main__':
    main()
